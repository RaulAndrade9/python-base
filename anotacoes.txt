--------------------GERAL--------------------
criar um ambiente virtual para o python
python -m venv .venv

habilitar o powershell para executar script:
Set-ExecutionPolicy Unrestricted

pyformat(pra ver as especificações de formatação)

dir(nome do objeto) -> mostra os métodos e protocolos do objeto.
tem que ser executado dentro de um terminal python

pep8.org - estilos python

--------------------FORMATAÇÃO--------------------
variavel.srtip("caractere") - remove todos os caracteres da variável
ex: nome = "Raul-Santos-Andrade"
    nome.strip("-")
    print(nome)
    RaulSantosAndrade

variavel.lstript() - remove o caracter definido nos parênteses apenas a esquerda

formatando usando o %

mensagem  = "Olá, %s, voce é o participante número %d e pode ganhar %.2f pontos."
- colocar ao lado do % o tipo de dado (s=string, d=double, f=float)
posso exibir através do print(mensagem % ("Raul", 8, 150)) ou se tiver sido atribuido a uma variável ex:
nome = Raul
numero = 8
pontos = 150
print(mensagem % (nome, numero, pontos))


Usanto o format 

mensagem  = "Olá, {}, voce é o participante número {} e pode ganhar {:.2f} pontos."

print(mensagem.format("Raul", 8, 150))
ou
print(mensagem.format(nome, numero, pontos))


Usando F string
nome = "Raul"

print(f"{nome:-^40}")
***Lembrar de colocar as chaves entre as ""

--------------------CONJUNTOS--------------------
conjunto_a = set([1, 2, 3,4 ,5 ,6])
conjunto_b = set([4, 5, 6, 7,8 ,9])

set não são iteráveis

novo_set = set (conjunto_a).union (set(conjunto_b)) mostra a união do dois conjuntos ou conjunto_a | conjunto_b

novo_set = conjunto_a.intersection(conjunto_b) ou conjunto_a & conjunto_b mostra a intersecção entre os conjuntos

novo_set = conjunto_a - conjunto_b ou conjunto_a.difference(conjunto_b) mostra a diferença entre os conjuntos, a ordem importa MUITO

novo_set = conjunto_a.symmetric_difference(conjunto_b) ou conjunto_a ^ conjunto_b
mostra a diferença simétrica entre os conjuntos (todos os elementos, exceto os que há em comum entre os dois conjuntos)

--------------------DICIONARIO--------------------
Quando cria um dicionário, há as informações de Key e Value (separados por um :)
Para separar um elemento de outro usa uma vírgula
criar:
cliente = {"nome": "Raul", "endereco": "Servidei Demarchi", "cidade":"São Bernardo do Campo"}

cliente.key() - mostra as keys do dicionário
cliente.values() - mostra os values do dicionário
cliente.items() - mostra as keys e os values


cliente.update(outro_dicionario) - adciona as informações de outro dicionário ao cliente

final = (**cliente, **outro_dicionario) - desempacota os dois dicionários dentro de um dicionário novo chamado 'final'

iterar no dicionário
for chave in cliente:
    print(chave, cliente[chave])


por padrão a iteração só traz a chave, mas é possível trazer também o valor com key[value]


--------------------CRIAR ARQUIVOS COM IPYTHON UTILIZANDO MÓDULO OS--------------------
import.os -> importa o módulo necessário

os.mkdir('nome da pasta') -> cria uma pasta
os.makedirs('caminho da pasta', exist_ok=True) -> também cria uma pasta, mas caso ela já exista não dá erro

É recomendável utilizar uma variável para definir o caminho da pasta, pois dependendo do sistema operacional o caminho inserido pode não funcionar.
Ex. Linux usa uma '/' como separador, no windows é uma '\' barra invertida

ficando assim: 
path = os.path.join('nome da pasta', 'nome da subpasta')
os.makedirs(path, exist_ok=True)

Listar o diretório atual:
os.curdir

Mostra o caminho absoluto do arquivo:
os.path.abspath(filepath do arquivo)

Criar um arquivo:
arquivo = open(filepath, 'a') -> caso o arquivo não exista, o python irá criar

usando o context manager:
 with open(filepath, 'a') as arquivo:
    arqvuivo.write

utilizando o context manager não é preciso fechar usando o .close, é preciso apenas sair da identação.




--------------------CRIAR ARQUIVOS COM IPYTHON UTILIZANDO MÓDULO PATH--------------------
from pathlib import Path - para importar o módulo


Path("pasta)
WindowsPath('pasta')

para substituir o que fiz anteriormente e passar o caminho da pasta, utilizaremos:
path = Path("pasta") / Path("subpasta")

dessa forma podemos utilizar
filepath = path / Path("novo.txt") - para descrever um caminho para o arquivo novo.txt

filepath.write_text("texto")-> para escrever no arquivo

filepath.read_text() -> pra ler o arquivo


--------------------TRATAMENTO DE ERROS--------------------
É de boa prática utilizar o try except para tratar erros.
try:
    names = open("names.txt).readlines()
except(FileNotFoundError, ZeroDivisionError) as e:     #é possível colocar mais de um erro, colocando eles em parenteses e separando por virgula
    print(f"{str(e)}")